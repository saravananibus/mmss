AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  KeyName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
 
Resources:
  MyEC2InstanceIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 'MyEC2InstancePolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'ec2:RunInstances'
            Resource: 'arn:aws:ec2:ap-southeast-1:418070443380:instance/*'
          - Effect: 'Allow'
            Action:
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeKeyPairs'
              - 'ec2:DescribeImages'
              - 'ec2:CreateTags'
            Resource: '*'
      Groups:
        - !Ref saravanan

  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: 'ap-southeast-1a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'ap-southeast-1b'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC

  DefaultRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable
  
  MyEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: 'Security group for MyEC2Instance'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
  
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-02453f5468b897e31'
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref MyEC2SecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum install python3
          yum install python3-pip -y
          pip install boto3
          pip install pymysql
          pip install Flask pymysql 
          yum update -y
          yum install httpd -y
          yum install git -y
          service httpd on
          chkconfig httpd on
          cd /var/www/html
          git clone https://github.com/saravananibus/mmss.git  
          cp -r mmss/templates/* .
          cp -r mmss/app.py/* .
          service httpd restart
          python3 app.py   

  Outputs:
   MyEC2InstancePublicIP:
      Description: 'Public IP address of the EC2 instance'
      Value: !GetAtt MyEC2Instance.PublicIp
